Spring容器的refresh（）【创建刷新】
1.prepareRefresh（）刷新的预处理工作；
  1）initPropertySource（）；初始化属性设置；子类自定义个性化的属性设置方法；
  2）、getEnvironment（）.validateRequiredProperties（）；检验属性的合法等
  3）earlyApplicationEvents=new LinkedHashSet<ApplicationEvent>();保存容器中的一些早期的事件；
2、obtainFreshBeanFactory（）；获取BeanFactory
    创建了一个this.beanFactory=new DefaultListableBeanFactory（）；
    设置id；
    2）、getBeanFactory（）；返回刚才GenericApplicationContext创建的BeanFactory对象；
    3）、将创建的BeanFactory【DefaultListableBeanFactory】返回；
3、prepareBeanFactory（beanFactory）；BeanFactory的预准备工作（BeanFactory进行一些设置）；
   1）设置BeanFactory的类加载器、支持表达解析器....
   2）添加部分BeanPostProcessor【ApplicationContextAwareProcessor】
   3）设置忽略的自动装配的接口EnvironmentAware、EmaddedValueResolverAware、xxx；
   4）设置可以解析的自动装配：我们能直接在任何组件中自动注入：BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
   5）、添加BeanPostProcessor【ApplicationListenerDetector】
   6）添加编译时的AspectJ：
   7）给BeanFactory中注册一些能用的组件
   evironment【ConfigurableEnvironment】、
   systemProperties【Map<String,Object>】、
   systemEnvironment【Map<String,Object>】
4、postProcessorBeanFactory（beanFactory）;BeanFactory准备工作完成后进行的后置处理工作；
      1）子类重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置
================================================================================
       5.invokeBeanFactoryPostProcessors（beanFactory）；执行BeanFactoryPostProcessor；
       BeanFactoryPostProcessor、BeanFactory的后置处理器。在BeanFactory标准初始化之后执行的；
       两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
       1）、执行BeanFactoryPostProcessor的方法：
          1）、获取所有的BeanDefinitionRegistryPostProcessor；
          2）、看限制性实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor、
          postProcessor。postProcessBeanDefinitionRegistry（registry）
          3）、在执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor；
          4）、最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcess；
         再执行BeanFactoryPostProcessor方法
         1）、先获取所有的BeanFactoryPostProcessor；后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级
         2）、先主从Priorityordered优先级接口的BeanPostProcessor；
         把每一个BeanPostProcessor：添加到BeanFactory中
         beanFactory.addBeanPostProcessor（postProcessor）；
         3）、再注册Ordered接口的
         4）、最后注册没有实现任何优先级接口的
         5）、最终注册MergedbeanDefintiionPostProcessor
         6）、注册一个ApplicationionListenerDetector：来在Bean创建完成后检查是否是ApplicationListener，如果是
5.initMessageSource();初始化MessageSource组件（做国际化功能：消息绑定，消息解析）
     1）获取BeanFactory
     2）看容器中是否有id为messageSource的，类型是MessageSource的组件
         如果有赋值给messageSource。如果没有自己创建一个DelegatingMessaheSource；
         MessageSource，取出国际化配置文件中的某个key的值，能按照取余信息获取

     3)、把创建好的MessageSource注册在容器中，以后


6.initApplicationEventMulticaster（）；初始化事件派发器
        1.获取BeanFactory
        2.从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster：
        3.如果上一步没有配置，创建一个SimpleApplicationEventMulicaster：
        4.将创建的ApplicationEventMultcaster添加到BeanFactory中，以后其他组件直接自动注入
7.onRefresh();留给字容器（子类）
             1.子类重写这个方法，在容器刷新的时候可以自定义逻辑
8.registerListeners（）；给容器中将所有项目里面的ApplicationListener注册进来
           1.从容器中拿到所有的ApplicationListener组件
           2.将每个监听器添加到事件派发器中
